package com.niit.Controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.niit.dao.UserDao;
import com.niit.model.UserDetail;

@RestController
public class UserController {

	@Autowired
	private UserDao userDAO;

	@RequestMapping(value = "/getAllUsers", method = RequestMethod.GET, headers = "Accept=application/json")
	public List<UserDetail> getAllUser() {
		return userDAO.getAllUser(); 
	}

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public ResponseEntity<UserDetail> createUser(@RequestBody UserDetail user) {
		user.setIsOnline("N");
		user.setRole("USER");
		boolean isSaved = userDAO.saveUser(user);
		if (isSaved)
			return new ResponseEntity<UserDetail>(user, HttpStatus.OK);
		else
			return new ResponseEntity<UserDetail>(user, HttpStatus.METHOD_FAILURE);
	}

	@PostMapping(value="/login")
	public ResponseEntity<UserDetail> checkLogin(@RequestBody UserDetail userDetails,HttpSession session)
	{
		System.out.println("login inside");
		if(userDAO.checkLogin(userDetails))
			{
			    System.out.println("Logging");
			    UserDetail tempUser=userDAO.getUser(userDetails.getUsername());
			    userDAO.updateOnlineStatus("A",tempUser);
			    session.setAttribute("currentUser",userDetails.getUsername());
				return new ResponseEntity<UserDetail>(tempUser,HttpStatus.OK);
			}
			else
			{
				return new ResponseEntity<UserDetail>(userDetails,HttpStatus.INTERNAL_SERVER_ERROR);
			}
		
	}
	
	@GetMapping(value="/logout/{username}")
	public ResponseEntity<String> loggingOut(@PathVariable("username")String username1)
	{
		UserDetail userDetails=userDAO.getUser(username);
		
		if(userDetailsDAO.updateOnlineStatus("N", userDetails))
		{
			return new ResponseEntity<String>("Successful LoggedOut",HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<String>("Error in LoggedOut",HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
	}

}
